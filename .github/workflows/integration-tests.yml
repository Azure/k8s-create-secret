name: "Trigger Integration tests"
on:
  pull_request:

jobs:
  aks-minikube-integration-tests:
    name: Minikube Integration Tests
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: /home/runner/.kube/config
      PR_BASE_REF: ${{ github.event.pull_request.base.ref }}
    steps:
      - id: setup-minikube
        name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: "v1.24.0"
          kubernetes version: "v1.17.8"
          driver: "none"
      - uses: actions/checkout@v1
      - id: action-npm-build
        name: npm install and build
        run: |
          echo $PR_BASE_REF
          if [[ $PR_BASE_REF != releases/* ]]; then
            npm install
            npm run build
          fi
      - id: call-create-secret
        name: execute k8s-create-secret
        uses: ./
        with:
          secret-name: integration-test-secret
          secret-type: generic
          string-data: '{ "testKey": "testValue" }'
      - id: validate-secret-creation
        name: validate secret creation
        run: |
          export VAL="$(kubectl get secret integration-test-secret --template {{.data.testKey}}| base64 -d)"
          if [ "$VAL" = "testValue" ]; then
            echo "successful secret creation"
          else
            echo "failed to read secret after creation"
            echo "VAL=$VAL"
            exit 1
          fi
  aks-minikube-docker-registry-tests:
    name: Minikube Docker Registry Secret Tests
    runs-on: ubuntu-latest
    env:
      KUBECONFIG: /home/runner/.kube/config
      PR_BASE_REF: ${{ github.event.pull_request.base.ref }}
    steps:
      - id: setup-minikube
        name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.4.2
        with:
          minikube version: "v1.24.0"
          kubernetes version: "v1.17.8"
          driver: "none"
      - uses: actions/checkout@v1
      - id: action-npm-build
        name: npm install and build
        run: |
          echo $PR_BASE_REF
          if [[ $PR_BASE_REF != releases/* ]]; then
            npm install
            npm run build
          fi
      - id: create-secret-action
        name: create test secret with k8s-create-secret
        uses: ./
        with:
          secret-name: action-test-secret
          container-registry-url: "test.registry.com"
          container-registry-username: "test-User1"
          container-registry-password: "test-Pass1"
      - id: create-secret-kubectl
        name: create test secret with kubectl
        run: |
          kubectl create secret docker-registry kubectl-test-secret --docker-username=test-User1 --docker-password=test-Pass1 --docker-server=test.registry.com
      - id: validate-secret-parity
        name: validate secret creation
        run: |
          export KUBECTLVALUE="$(kubectl get secret kubectl-test-secret --template {{.data.testKey}})"
          export ACTIONVALUE="$(kubectl get secret action-test-secret --template {{.data.testKey}})"
          if [ "$ACTIONVALUE" = "$KUBECTLVALUE" ]; then
            echo "secret values match"
          else
            echo "action-created secret value does not match kubectl-created secret"
            echo "ACTIONVALUE=$ACTIONVALUE"
            echo "KUBECTLVALUE=$KUBECTLVALUE"
            exit 1
          fi
